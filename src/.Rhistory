summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets$Neighborhood[missing_frontage] %in% median_lots$Neighborhood
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
if (both_sets$Neighborhood[missing_frontage] %in% median_lots$Neighborhood) {
neighborhood_median <- median_lots$median
}
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets$Neighborhood[missing_frontage]
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets$Neighborhood[missing_frontage]
median_lots[median_lots == both_sets$Neighborhood[missing_frontage],"median"]
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets$Neighborhood[missing_frontage]
median_lots[both_sets$Neighborhood[missing_frontage], "median"]
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets$Neighborhood[missing_frontage]
median_lots[median_lots == both_sets$Neighborhood[missing_frontage], "median"]
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
missing_frontage
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets[8, "LotFrontage"]
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets[8, "Neighboorhood"]
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
# Replace missing values with median
both_sets[8, "Neighborhood"]
for (i in missing_frontage) {
both_sets$Neighborhood[i]
}
head(missing_frontage)
both_sets[8, "Neighborhood"]
typeof(both_sets[8, "Neighborhood"])
typeof(both_sets)
both_sets
class(both_sets)
both_sets[8, "Neighborhood"] %>% pull()
head(missing_frontage)
# Replace missing values with median
both_sets[8, "Neighborhood"] %>% pull()
for (i in missing_frontage) {
neighboorhood <- both_sets[i, "Neighborhood"] %>% pull()
}
both_sets
both_sets$Neighborhood[missing_frontage]
# Replace missing values with median
neighboorhood <- both_sets[8, "Neighborhood"] %>% pull()
for (i in missing_frontage) {
neighboorhood <- both_sets[i, "Neighborhood"] %>% pull()
}
neighborhood <- both_sets[8, "Neighborhood"] %>% pull()
median_lots[Neighborhood == neighborhood, "median"]
neighborhood <- both_sets[8, "Neighborhood"] %>% pull()
median_lots["Neighborhood" == neighborhood, "median"]
neighborhood <- both_sets[8, "Neighborhood"] %>% pull()
median_lots %>%
filter(Neighborhood == neighborhood)
neighborhood <- both_sets[8, "Neighborhood"] %>% pull()
median_lots %>%
filter(Neighborhood == neighborhood) %>%
select(median)
neighborhood <- both_sets[8, "Neighborhood"] %>% pull()
median_lots %>%
filter(Neighborhood == neighborhood) %>%
select(median) %>% pull()
neighborhood <- both_sets[8, "Neighborhood"] %>% pull()
neighborhood_median <- median_lots %>%
filter(Neighborhood == neighborhood) %>%
select(median) %>% pull()
both_sets$LotFrontage[8]
sort(colSums(sapply(both_sets[missing_values], is.na)), decreasing = TRUE)
# Calculate median lot frontage by neighborhood
head(median_lots <- both_sets %>%
select(Neighborhood, LotFrontage) %>%
group_by(Neighborhood) %>%
summarize(median = median(LotFrontage, na.rm = TRUE)))
# Find which homes are missing frontage area
missing_frontage <- which(is.na(both_sets$LotFrontage))
for (i in missing_frontage) {
# Name of neighborhood for each home with missing lot frontage
neighborhood <- both_sets[i, "Neighborhood"] %>% pull()
# Median linear feet for each home
neighborhood_median <- median_lots %>%
filter(Neighborhood == neighborhood) %>%
select(median) %>% pull()
# Assign the median to each missing value
both_sets$LotFrontage[i] <- neighborhood_median
}
sort(colSums(sapply(both_sets[missing_values], is.na)), decreasing = TRUE)
both_sets %>% select(starts_with("Garage"))
both_sets %>% select(starts_with("Garage")) %>% names()
is.na(both_sets$GarageYrBlt) == is.na(both_sets$GarageFinish)
is.na(both_sets$GarageYrBlt)
which(is.na(both_sets$GarageYrBlt) == is.na(both_sets$GarageFinish))
which(is.na(both_sets$GarageYrBlt) & is.na(both_sets$GarageFinish))
which(is.na(both_sets$GarageYrBlt) & is.na(both_sets$GarageFinish))
which(is.na(both_sets$GarageYrBlt))
which(is.na(both_sets$GarageYrBlt) & is.na(both_sets$GarageFinish)) == which(is.na(both_sets$GarageYrBlt))
which(is.na(both_sets$GarageYrBlt)) == which(is.na(both_sets$GarageFinish))
which(both_sets$GarageYrBlt & both_sets$YearBuilt)
which(both_sets$GarageYrBlt != both_sets$YearBuilt)
which(is.na(both_sets$GarageYrBlt) != both_sets$YearBuilt)
which(is.na(both_sets$GarageYrBlt) == both_sets$YearBuilt)
length(which(both_sets$GarageYrBlt == both_sets$YearBuilt))
which(both_sets$GarageYrBlt == both_sets$YearBuilt))
which(both_sets$GarageYrBlt == both_sets$YearBuilt)
length(both_sets$GarageYrBlt == both_sets$YearBuilt)
which(both_sets$GarageYrBlt != both_sets$YearBuilt)
which(both_sets$GarageYrBlt != both_sets$YearBuilt)
both_sets %>%
select(GarageYrBlt, YearBuilt) %>%
filter(GarageYrBlt != YearBuilt)
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
both_sets %>%
select(GarageYrBlt, YearBuilt) %>%
filter(GarageYrBlt != YearBuilt)
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
both_sets %>%
select(GarageYrBlt, YearBuilt) %>%
filter(is.na(GarageYrBlt) != YearBuilt)
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
which(both_sets$GarageYrBlt == both_sets$YearRemodAdd)
length(which(both_sets$GarageYrBlt == both_sets$YearRemodAdd))
length(which(both_sets$GarageYrBlt == both_sets$YearRemodAdd)) + length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
length(which(both_sets$GarageYrBlt == both_sets$YearRemodAdd)) + length(which(both_sets$GarageYrBlt != both_sets$YearBuilt)) + 159
length(which(both_sets$GarageYrBlt == both_sets$YearRemodAdd)) + length(which(both_sets$GarageYrBlt == both_sets$YearBuilt))
length(which(both_sets$GarageYrBlt == both_sets$YearRemodAdd))
unique(both_sets$GarageType)
which(is.na(both_sets$GarageType))
length(which(both_sets$GarageYrBlt == both_sets$YearBuilt))
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
both_sets %>%
select(GarageYrBlt, YearBuilt) %>%
filter(GarageYrBlt == YearBuilt)
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
both_sets %>%
select(GarageYrBlt, YearBuilt) %>%
filter(GarageYrBlt != YearBuilt)
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
both_sets %>%
select(GarageYrBlt, YearBuilt) %>%
filter(GarageYrBlt == YearBuilt)
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
unique(both_sets$GarageFinish)
which(is.na(both_sets$GarageType))
unique(both_sets$GarageQual)
which(is.na(both_sets$GarageType))
which(is.na(both_sets$GarageYrBlt)) == which(is.na(both_sets$GarageFinish))
sum(which(is.na(both_sets$GarageYrBlt)) == which(is.na(both_sets$GarageFinish)))
sum(which(is.na(both_sets$GarageYrBlt)) == which(is.na(both_sets$GarageFinish)) ==
sum(which(is.na(both_sets$GarageYrBlt)) == which(is.na(both_sets$GarageFinish)) == which(is.na(both_sets$GarageQual)) == which(is.na(both_sets$GarageCond)))
sum(which(is.na(both_sets$GarageYrBlt)) == which(is.na(both_sets$GarageFinish)))
sum(which(is.na(both_sets$GarageQual)) == which(is.na(both_sets$GarageCond)))
sum(which(is.na(both_sets$GarageYrBlt)) == which(is.na(both_sets$GarageFinish)))
sum(which(is.na(both_sets$GarageFinish)) == which(is.na(both_sets$GarageQual)))
sum(which(is.na(both_sets$GarageQual)) == which(is.na(both_sets$GarageCond)))
both_sets %>%
select(GarageFinish, GarageArea) %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(GarageFinish, GarageArea) %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
both_sets %>%
select(GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 1)
both_sets %>%
select(GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
both_sets %>%
select(Id, GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
both_sets %>%
select(GarageFinish, GarageArea) %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
both_sets %>%
select(GarageFinish, GarageArea) %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(Id, GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
both_sets %>%
select(GarageFinish, GarageArea) %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(Id, GarageFinish, GarageArea) %>%
filter(is.na(GarageCond) & GarageArea > 0)
both_sets %>%
select(GarageFinish, GarageArea) %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(Id, GarageCond, GarageArea) %>%
filter(is.na(GarageCond) & GarageArea > 0)
both_sets %>%
select(GarageFinish, GarageArea) %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(Id, GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
both_sets %>%
select(GarageCond, GarageArea) %>%
group_by(GarageCond) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets %>%
select(Id, GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
both_sets %>%
select(Id, GarageFinish, GarageArea) %>%
filter(is.na(GarageFinish) & GarageArea > 0)
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Finish
garage %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
# Quality
garage %>%
group_by(GarageQual) %>%
summarize(mean = mean(GarageArea), count = n())
# Condition
garage %>%
group_by(GarageCond) %>%
summarize(mean = mean(GarageArea), count = n())
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c("GarageFinish", "GarageQual", "GarageCond")
# Mean area for garage variables
for (i in garage_vars) {
garage %>%
group_by(i) %>%
summarize(mean = mean(GarageArea), count = n())
}
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c(GarageFinish, GarageQual, GarageCond)
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c("GarageFinish", "GarageQual", "GarageCond")
# Mean area for garage variables
for (i in garage_vars) {
garage %>%
group_by(unquote(i)) %>%
summarize(mean = mean(GarageArea), count = n())
}
install.packages("eply")
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c("GarageFinish", "GarageQual", "GarageCond")
# Mean area for garage variables
for (i in garage_vars) {
garage %>%
group_by(unquote(i)) %>%
summarize(mean = mean(GarageArea), count = n())
}
library(eply)
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c("GarageFinish", "GarageQual", "GarageCond")
# Mean area for garage variables
for (i in garage_vars) {
garage %>%
group_by(unquote(i)) %>%
summarize(mean = mean(GarageArea), count = n())
}
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c("GarageFinish", "GarageQual", "GarageCond")
# Mean area for garage variables
for (i in garage_vars) {
garage %>%
group_by(unquote(i)) %>%
summarize(mean = mean(GarageArea), count = n())
}
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c("GarageFinish", "GarageQual", "GarageCond")
# Mean area for garage variables
for (i in garage_vars) {
garage %>%
group_by(unquote(i)) %>%
summarize(mean = mean(GarageArea), count = n()) %>%
print()
}
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Garage variables
garage_vars <- c("GarageFinish", "GarageQual", "GarageCond")
garage_vars <- unquote(garage_vars)
# Mean area for garage variables
for (i in garage_vars) {
garage %>%
group_by(i) %>%
summarize(mean = mean(GarageArea), count = n()) %>%
print()
}
garage_vars <- unquote(garage_vars)
unquote(garage_vars)
unquote(garage_vars[1])
unquote(garage_vars, deep = TRUE)
unquote(garage_vars[1], deep = TRUE)
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Finish
garage %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
# Quality
garage %>%
group_by(GarageQual) %>%
summarize(mean = mean(GarageArea), count = n())
# Condition
garage %>%
group_by(GarageCond) %>%
summarize(mean = mean(GarageArea), count = n())
both_sets$GarageFinish[2127]
# Finish
garage %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
# Quality
garage %>%
group_by(GarageQual) %>%
summarize(mean = mean(GarageArea), count = n())
# Condition
garage %>%
group_by(GarageCond) %>%
summarize(mean = mean(GarageArea), count = n())
# Garage data frame
garage <- both_sets %>%
select(starts_with("Garage"))
# Finish
garage %>%
group_by(GarageFinish) %>%
summarize(mean = mean(GarageArea), count = n())
# Quality
garage %>%
group_by(GarageQual) %>%
summarize(mean = mean(GarageArea), count = n())
# Condition
garage %>%
group_by(GarageCond) %>%
summarize(mean = mean(GarageArea), count = n())
# Assign values for Id = 2127 with mean area closest to 360
both_sets$GarageFinish[2127] <- "Unf"
both_sets$GarageQual[2127] <- "Fa"
both_sets$GarageCond[2127] <- "Fa"
sort(colSums(sapply(both_sets[missing_values], is.na)), decreasing = TRUE)
min(both_sets$GarageYrBlt)
min(both_sets$GarageYrBlt, nm.rm = TRUE)
min(both_sets$GarageYrBlt, na.rm = TRUE)
length(which(both_sets$GarageYrBlt == both_sets$YearBuilt))
length(which(both_sets$GarageYrBlt == both_sets$YearBuilt)) + 544
length(which(both_sets$GarageYrBlt == both_sets$YearBuilt)) + 544 + 159
length(which(both_sets$GarageYrBlt == both_sets$YearBuilt))
length(which(both_sets$GarageYrBlt != both_sets$YearBuilt))
missing_garage <- which(is.na(both_sets$GarageYrBlt))
both_sets[missing_garage, "GarageYrBlt"] <- both_sets[missing_garage, "YearBuilt"]
sort(colSums(sapply(both_sets[missing_values], is.na)), decreasing = TRUE)
# Visualize the relationship
figure_1 <- ggplot(descriptives, aes(x = station, y = mean, group = direction)) +
geom_line(aes(linetype = direction), size = 1) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.1) +
geom_point(size = 5, position = position_dodge(width = 0.01)) +
geom_point(size = 4, position = position_dodge(width = 0.01), color = "white") +
expand_limits(y = c(0, 5)) +
scale_y_continuous(breaks = seq(0, 5, 0.5), expand = c(0, 0)) +
guides(linetype = guide_legend("")) +
labs(x = "", y = "Subjective Distance") +
apa_theme +
theme(legend.position = c(0.1, 0.99))
# Load dependencies
library(tidyverse)
library(car)
library(broom)
library(psych)
# Set working directory
setwd("~/GitHub/osl-maglio-polman-2014/src")
load("~/GitHub/osl-maglio-polman-2014/src/.RData")
####### SAVE PLOTS #######
ggsave(filename = "figure_1.png", plot = figure_1, device = "png", path = "~/GitHub/osl-maglio-polman-2014/data/results/")
# Visualize the relationship
figure_1 <- ggplot(descriptives, aes(x = station, y = mean, group = direction)) +
geom_line(aes(linetype = direction), size = 1) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.1) +
geom_point(size = 5, position = position_dodge(width = 0.01)) +
geom_point(size = 4, position = position_dodge(width = 0.01), color = "white") +
expand_limits(y = c(0, 5)) +
scale_y_continuous(breaks = seq(0, 5, 0.5), expand = c(0, 0)) +
guides(linetype = guide_legend("")) +
labs(x = "", y = "Subjective Distance") +
apa_theme +
theme(legend.position = c(0.1, 0.99))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/osl-maglio-polman-2014/src")
ggplot(descriptives, aes(x = station, y = mean, group = direction)) +
geom_line(aes(linetype = direction), size = 1) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.1) +
geom_point(size = 5, position = position_dodge(width = 0.01)) +
geom_point(size = 4, position = position_dodge(width = 0.01), color = "white") +
expand_limits(y = c(0, 5)) +
scale_y_continuous(breaks = seq(0, 5, 0.5), expand = c(0, 0)) +
guides(linetype = guide_legend("")) +
labs(x = "", y = "Subjective Distance") +
apa_theme +
theme(legend.position = c(0.1, 0.99))
